buildscript {
  repositories {
    mavenCentral()
    jcenter()
    mavenLocal()
  }

  dependencies {
    classpath "org.elasticsearch.gradle:build-tools:${elasticsearchVersion}"
  }
}

allprojects {
  group = 'com.o19s'
  version = "${ltrVersion}-es${elasticsearchVersion}"

  apply plugin: 'java'

  dependencies {
    compile "org.apache.lucene:lucene-expressions:${luceneVersion}"
    compile "org.antlr:antlr4-runtime:${antlrVersion}"
    compile "org.ow2.asm:asm:${ow2Version}"
    compile "org.ow2.asm:asm-commons:${ow2Version}"
    compile "org.ow2.asm:asm-tree:${ow2Version}"
    compile 'com.o19s:RankyMcRankFace:0.1.1'
    compile "com.github.spullara.mustache.java:compiler:0.9.3"
  }
}

apply plugin: 'idea'
apply plugin: 'elasticsearch.esplugin'
apply plugin: 'elasticsearch.java-rest-test'
apply plugin: 'elasticsearch.rest-resources'

// license of this project
licenseFile = rootProject.file('LICENSE.txt')
// copyright notices
noticeFile = rootProject.file('NOTICE.txt')

// disable uploadArchives task for now, no upload happening currently
uploadArchives.enabled = false

esplugin {
  name 'ltr'
  description 'Learning to Rank Query w/ RankLib Models'
  classname 'com.o19s.es.ltr.LtrQueryParserPlugin'
  // license of the plugin, may be different than the above license
  licenseFile = rootProject.file('LICENSE.txt')
  // copyright notices, may be different than the above notice
  noticeFile = rootProject.file('NOTICE.txt')
}

// In this section you declare the dependencies for your production and test code
// Elasticsearch dependency is included due to the build-tools, test-framework as well
repositories {
  mavenCentral()
  mavenLocal()
  jcenter {
    url "https://jcenter.bintray.com/"
    metadataSources{
      artifact()
    }
  }
}

dependencyLicenses {
  mapping from: /lucene-.*/, to: 'lucene'
  mapping from: /asm-.*/, to: 'asm'
  mapping from: /Ranky-.*/, to: 'lucene'
  mapping from: /compiler-.*/, to: 'lucene'
}

sourceSets {
  javaRestTest {
    compileClasspath += sourceSets["main"].output + sourceSets["test"].output + configurations["testRuntimeClasspath"]
    runtimeClasspath += output + compileClasspath
  }
}

java {
  withJavadocJar()
  withSourcesJar()
}

// Set to false to not use elasticsearch checkstyle rules
checkstyleMain.enabled = true
checkstyleTest.enabled = true

// FIXME dependency license check needs to be enabled
dependencyLicenses.enabled = false

// FIXME thirdparty audit needs to be enabled
thirdPartyAudit.enabled = false

// Uncomment this to skip license header checks
licenseHeaders.enabled = false

// No need to validate POM, as we do not upload to sonatype
validateNebulaPom.enabled = false

// Elastic tried to remove the logging requirement for plugins, but didn't get it quite right so this is a short term fix until 7.11
// https://github.com/elastic/elasticsearch/issues/65247
loggerUsageCheck.enabled = false
